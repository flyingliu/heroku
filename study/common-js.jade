.container
  .row
    .col-md-12
      form.form-inline
        label(for="input")
          input#input(type="checkbox")
          span 点击这里试试看
    .col-md-12
      hr
      button.btn.btn-info.iambutton 我是按钮！
      hr
      button.btn.btn-info.iambutton 我是按钮！
      hr
      button.btn.btn-info.iambutton 我是按钮！
      hr
      button.btn.btn-info.iambutton 我是按钮！

script.
  //是否存在指定函数 
  function isExitsFunction(funcName) {
    try {
      if (typeof(eval(funcName)) == "function") {
          return true;
      }
    } catch(e) {}
    return false;
  }
  //是否存在指定变量
  function isExitsVariable(variableName) {
    try {
      if (typeof(variableName) == "undefined") {
        return false;
      } else {
        return true;
      }
    } catch(e) {}
    return false;
  }

  /**
   * 阻止冒泡引发的label内的chackbox、radio双击而导致的错误出现
   * @param Function fn 事件调用函数
   */
  function doubleclick(fn){
    var evTimeStamp = 0;
    return function(){
      var now = +new Date();
      if (now - evTimeStamp < 100) {
        return;
      }
      fn();
      evTimeStamp = now;
    }
  }
  /**
   * 获取非行间样式
   * @param obj 要获取样式的对象
   * @param attr 要获取的样式
   */
  function getStyle(obj, attr)  {
    if(obj.currentStyle) {
      return obj.currentStyle[attr];
    }
    else {
      return getComputedStyle(obj,false)[attr];
    }
  }

  /**
   * 函数节流方法
   * @param Function fn 延时调用函数
   * @param Number delay 延迟多长时间
   * @param Number atleast 至少多长时间触发一次
   * @return Function 延迟执行的方法
   */
  function throttle(fn, delay, atleast) {
    var timer = null;
    var previous = null;
    return function () {
      var now = +new Date();
      if ( !previous ) previous = now;
      if ( now - previous > atleast ) {
        fn();
        previous = now;
      } else {
        clearTimeout(timer);
        timer = setTimeout(function() {
          fn();
        }, delay);
      }
    }
  }

  /**
   * [元素事件监听]
   * @param {[type]}   element [监听元素]
   * @param {[type]}   type    [监听事件类型]
   * @param {Function} fn      [事件驱动]
   * 内联事件 (Inline Events, 即 HTML 中的 onclick="" 属性 和 element.onclick)会转化为元素的属性，当指定多个的内联事件时，它之前所指定的内联事件会被覆盖掉。
   */
  function addEvent(element,type,fn) {
    if(document.addEventListener){
      return element.addEventListener(type,fn,false);
    } else {
      return element.attachEvent('on'+type,fn);
    }
  }

  /**
   * 阻止事件冒泡
   * @param  {[type]} e [description]
   * @return {[type]}   [description]
   */
  function stopPropagation(e) {
    e = e || window.event;
    if(e.stopPropagation) { //W3C阻止冒泡方法
      e.stopPropagation();
    } else {
      e.cancelBubble = true; //IE阻止冒泡方法
    }
  }



  var label = document.querySelectorAll('label')[0]
  label.onclick = doubleclick(testFn);
  function testFn(){
    console.log('---');
  }




  var node = $('.row')[0];
  var w = getStyle(node,'backgroundColor');
  console.log(w);