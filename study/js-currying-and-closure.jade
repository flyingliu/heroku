.container
  .row
    h1 javascript中的闭包和柯里化
    h3 什么是函数
    p 函数是由事件驱动的或者当他被调用时执行的可重复使用的代码块。函数 function 即代表的求值，而从另一个角度讲，函数本身也是一个值。

    h3 什么是柯里化currying
    p f(x)(y)就是柯里化：使用函数f,输入x,计算，获得一个新的函数，再次输入Y，计算，获得结果。
    pre.
      function f(x){
        return function(y) {
          return function(z){
            console.log(x+y+z);
          }
        }
      }

      g = f(1);
      g(20)(30); // 51
      g(2)(3); // 6
      f(10)(2)(3); //15
    p 计算三个数字为什么要大费周折？原因在于可以获得拥有内部记忆的函数：如 g = f(1);可以获得一个新的函数g。可以使用 g 编写多种不同的求值组合，而第一个输入始终是 1；


    h3 什么是闭包 Closure?
    p 利用柯里化机制的函数就是闭包。通过柯里化，获取一个拥有记忆功能的函数，简化后续的多种计算操作，这即使闭包。

    pre.
      function move(start) {
        var pos = start;
        return function () {
          console.log('Move to ' + (pos += 2) + '.');
        }
      }

      var move_next = move(6); 
      move_next();  // Move to 8. 
      move_next();  // Move to 10.

    h3 进阶：记忆
    p 下面我们来看一下经典的缓存函数。开始有两个输入参数，一个是数组 sets ，一个是求值函数 f ：

    pre.
      function memorize(sets, f) {
        var cache = {};
        return function (x) {
          console.log('cache:', cache);
          return x in cache
            ? cache[x]
            : cache[x] = f(sets[x]);
        }
      }

    p 首先，我们在 memorize 的内部空间放置了一个记忆单元： cache ，是一个 Object 类型，这样我们就可以用来存储任何我们想要的数据。 Object 类型可以看做是简化并且统一版的C语言中的 struct ：不需要考虑链接，不需要考虑类型，解释器会为你完成。

    p 接下来，我们运用柯里化返回一个函数。这个函数有一个输入参数，指定了 sets 数组中的第几项进行计算。我们首先使用 console.log 打印当时内部空间的记忆单元 cache 的值，然后判断输入参数是不是在 cache 的键中。如果已经存在，直接返回记忆的内容，如果没有存在，使用函数 f 对输入参数 sets[x] 求值，然后把结果记忆到内部空间的记忆单元： cache 中。

    p 通过记忆，每次使用求值函数 f 计算后，都将结果保存在 cache 中，这样可以极大的降低重复计算：

    pre.
      var g = memorize([1000, 2000, 3000], function (x) { return x * x; });

      g(0);  // cache: {}，计算1000*1000
      g(0);  // cache: {"0":1000000}，来自记忆
      g(0);  // cache: {"0":1000000}，来自记忆
      g(0);  // cache: {"0":1000000}，来自记忆
      g(1);  // cache: {"0":1000000}，计算2000*2000
      g(1);  // cache: {"0":1000000, "1":4000000}，来自记忆
      g(1);  // cache: {"0":1000000, "1":4000000}，来自记忆

    h3 进阶：让函数循环起来
    p 我们已经看到了柯里化(闭包)的好处和妙处，同时这些也都是函数 function 概念帮助我们完成了一系列繁琐的工作。下面我们将把函数 function 运用到循环中，进一步了解函数的好处和妙处。

    pre.
      function map(sets, f) {
        var i = 0, len = sets.length, result = [], val;
        while (i < len) {
          val = f(sets[i]);
          result.push(val);
          ++i;
        }
        return result;
      }
    p 函数 map 使用两个输入参数：一个数组 sets ，一个求值函数 f 。

    p 首先，我们计算数组 sets 的长度，设定一个位置符 i 。然后对 sets 进行循环的操作，把其中的 sets[i] 进行求值，然后压入 result 中，最后将 result 返回。

    p 通过这样的设定，我们使函数 f 在循环中运转。我们还可以进一步，再放入一个条件函数，只有条件成功的时候才进行求值：

    pre.
      function map(sets, condf, f) {
        var i = 0, len = sets.length, result = [], val, set;
        while (i < len) {
          set = sets[i];
          if (condf(set)) {
            val = f(set);
            result.push(val);
          }
          ++i;
        }
        return result;
      }
    p 上边我们刚刚讨论了柯里化，所以把这个函数改一改，变成柯里化：
    pre.
      function map(sets, f) {
        return function (condf) {
          var i = 0, len = sets.length, result = [], val, set;  
          while (i < len) {
            set = sets[i];
            if (condf(set)) {
              val = f(set);
              result.push(val);
            }
            ++i;
          }
          return result;
        }
      }

    p 现在，函数 map 在循环中进一步增加了灵活性，我们可以这样方便的使用：
    pre.
      var mymap = map([1,2,3,4,5,6], function (set) { return set + 1; });
      mymap(function (set) { return set % 2 === 0 });  // 偶数
      mymap(function (set) { return set > 9 });  // 大于9

      // 如果你熟悉Ecmascript 6，那么代码会非常有趣
      var mymap = map([1,2,3,4,5,6], set => set + 1);
      mymap(set => set % 2 === 0);  // 偶数
      mymap(set => set > 9 );  // 大于9


script.
  function f(x){
    return function(y) {
      return function(z){
        console.log(x+y+z);
      }
    }
  }

  g = f(1);
  g(20)(30);


  function move(start) {
    var pos = start;
    return function () {
      console.log('Move to ' + (pos += 2) + '.');
    }
  }

  var move_next = move(6); 
  move_next();  // Move to 8. 
  move_next();  // Move to 10.

  function memorize(sets, f) {
    var cache = {};
    return function (x) {
      console.log('cache:', cache);
      return x in cache
        ? cache[x]
        : cache[x] = f(sets[x]);
    }
  }
  var g = memorize([1000, 2000, 3000], function (x) { return x * x; });

  g(0);  // cache: {}，计算1000*1000
  g(0);  // cache: {"0":1000000}，来自记忆
  g(0);  // cache: {"0":1000000}，来自记忆
  g(0);  // cache: {"0":1000000}，来自记忆
  g(1);  // cache: {"0":1000000}，计算2000*2000
  g(1);  // cache: {"0":1000000, "1":4000000}，来自记忆
  g(1);  // cache: {"0":1000000, "1":4000000}，来自记忆

  function map(sets, f) {
    return function (condf) {
      var i = 0, len = sets.length, result = [], val, set;  
      while (i < len) {
        set = sets[i];
        if (condf(set)) {
          val = f(set);
          result.push(val);
        }
        ++i;
      }
      return result;
    }
  }

  var mymap = map([1,2,3,4,5,6], function (set) { return set + 1; });
  var b = mymap(function (set) { return set % 2 === 0 });  // 偶数
  console.log(b);
  var c = mymap(function (set) { return set > 4 });  // 大于9
  console.log(c);
