.container
  .row
    h1 constructor,prototype,__type__的笔记
    h3 constructor 属性
    p constructor 属性始终指向创建当前对象的构造函数。
    pre.
      var arr = [];
      console.log(arr.constructor === Array);
      var obj = {};
      console.log(obj.constructor === Object);
      var bool = true;
      console.log(bool.constructor === Boolean);
      var str = 'true';
      console.log(str.constructor === String);
      var A = function(){};
      console.log(A.constructor === Function);
      var a = new A();
      console.log(a.constructor === A);
    h3 prototype 属性
    p prototype 是每个 function定义时自带的属性，被称为原型对象。一旦原型对象被赋予属性和方法，那么由相应的构造函数创建的实例会继承prototype上的属性和方法。
    pre.
      //instance : a
      function A(){}
      var a=new A();
      A.prototype.name="xl";
      A.prototype.sayName=function(){
        console.log(this.name);
      }
      console.log(a.name);// "xl"
      a.sayName();// "xl"
      //那么由constructor创建的instance会继承prototype上的属性和方法

    h3 constructor 和 prototype
    p 每个函数都有 prototype 属性，而这个 prototype 的 constructor属性会指向这个函数。
    pre.
      var A = function(){};
      console.log(A.constructor === Function);
      var a = new A();
      console.log(a.constructor === A);
      console.log(obj.prototype);  //undefined 说明并不是每个对象都有protoype属性

      console.log(A.prototype.constructor === A);

    p 如果我们重写这个A.prototype属性，那么 constructor 属性的指向就会发生改变了。
    pre.
      A.prototype.sayName = function(){
        console.log(this.name);
      }
      // 实例实际上是对原型对象的重写
      A.prototype = {
        sayName:function(){ console.log(this.name);}
      }
      console.log('----------------');
      console.log(A.prototype.constructor === A); //false
      console.log(a.constructor === A);           //true

script.
  var arr = [];
  console.log(arr.constructor === Array);
  var obj = {};
  console.log(obj.constructor === Object);
  var bool = true;
  console.log(bool.constructor === Boolean);
  var str = 'true';
  console.log(str.constructor === String);
  var A = function(){};
  console.log(A.constructor === Function);
  var a = new A('flying');
  console.log(a.constructor === A);
  console.log(obj.prototype);  //undefined 说明并不是每个对象都有protoype属性

  console.log(A.prototype.constructor === A);
  A.prototype.sayName = function(){
    console.log(this.name);
  }
  // 实例实际上是对原型对象的重写
  A.prototype = {
    sayName:function(){ console.log(this.name);}
  }
  console.log('----------------');
  console.log(A.prototype.constructor === A); //false
  console.log(a.constructor === A);           //true
  console.log(A.prototype.constructor == Object);
  //-------------------
  console.log('----------------');
  function Person(name){
    this.name=name;
  }
  Person.prototype.sayName=function(){
    console.log(this.name);
  }
  var personOne = new Person("a");
  var personTwo = new Person("b");
  personOne.sayName(); // 输出  "a"
  personTwo.sayName(); // 输出 "b"
  console.log(personOne.__proto__==Person.prototype); // true
  console.log(personTwo.__proto__==Person.prototype); // true
  console.log(personOne.constructor==Person); //true
  console.log(personTwo.constructor==Person); //true
  console.log(Person.prototype.constructor==Person); //true
  console.log(Person.constructor); //function Function(){}
  console.log(Person.__proto__.__proto__); // Object{} 

